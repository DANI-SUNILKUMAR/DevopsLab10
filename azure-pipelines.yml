<<<<<<< HEAD
# Your local pipeline config
trigger:
  branches:
    include:
      - main
=======
# Remote pipeline config from GitHub
trigger:
  branches:
    include:
      - master
>>>>>>> origin/main

trigger:
  branches:
    include:
      - main  # Automatically trigger the pipeline for changes to the 'main' branch

pool:
  vmImage: 'ubuntu-latest'  # Specify the VM image to use for the pipeline (e.g., ubuntu-latest, windows-latest)

steps:
# Step 1: Checkout the repository
- task: Checkout@2
  displayName: 'Checkout code'

# Step 2: Set up Java
- task: UseJavaToolInstaller@1
  displayName: 'Set up JDK 11'
  inputs:
    versionSpec: '11'  # Install JDK 11 (you can change this version if needed)

# Step 3: Install Maven
- task: UseMaven@4
  displayName: 'Set up Maven'
  inputs:
    mavenVersion: '3.x'  # You can specify the Maven version here

# Step 4: Build the project using Maven
- task: Maven@3
  displayName: 'Build with Maven'
  inputs:
    mavenPomFile: 'pom.xml'  # Path to your pom.xml file
    options: '-X'  # Enable Maven debugging output
    goals: 'clean install'  # Goal to run (clean and then install dependencies)

# Step 5: Run tests (optional, if you want to run unit tests)
- task: Maven@3
  displayName: 'Run Unit Tests'
  inputs:
    mavenPomFile: 'pom.xml'
    options: '-DskipTests=false'  # Set false to run tests
    goals: 'test'  # Maven goal to run unit tests

# Step 6: Publish test results (optional, if you want to see test reports)
- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFiles: '**/target/test-*.xml'  # Path to test result files (standard Maven test report location)

# Step 7: Publish artifacts (optional, if you want to publish the build artifacts)
- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts'
  inputs:
    artifactName: 'drop'  # Name of the artifact to be published
    targetPath: '$(Build.ArtifactStagingDirectory)'  # Directory where artifacts will be stored
``
